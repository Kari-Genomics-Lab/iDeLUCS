# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'Sketck.ui'
#
# Created by: PyQt5 UI code generator 5.15.6
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

from cgitb import reset
from fileinput import filename
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtCore import QFile, QTextStream, QThread, pyqtSignal
from PyQt5.QtWidgets import QMessageBox
from PyQt5.QtGui import QPixmap
from src import models
from src.utils import ProcessFasta, PlotPolygon, plot_confusion_matrix
from src.utils_GUI import define_ToolTips
import numpy as np
import torch
import pandas as pd
import csv
from src.utils import cluster_acc
from scipy import stats

import matplotlib
import matplotlib.pyplot as plt
matplotlib.use('Qt5Agg')
from matplotlib.backends.backend_qt5agg import FigureCanvasQTAgg as FigureCanvas
from matplotlib.backends.backend_qt5agg import NavigationToolbar2QT as NavigationToolbar
from matplotlib.figure import Figure


class MplCanvas(FigureCanvas):

    def __init__(self, parent=None, width=5, height=4, dpi=100):
        fig = Figure(figsize=(width, height), dpi=dpi, tight_layout=True)
        self.axes = fig.add_subplot(111)
        super(MplCanvas, self).__init__(fig)
        self.setParent(parent)


class ParserThread(QThread):

    def __init__(self, model, args):
        super().__init__()
        self.model = model
        self.args = args

    update_loading_progress = pyqtSignal(dict)
    parsing_error = pyqtSignal(str)
    def run(self):
        try:
            self.model.kmers, self.model.names, self.model.lengths, GT = ProcessFasta(self.args['sequence_file'],
                                                                                      self.args['k'],
                                                                                      GT_file=self.args['GT_file'])
            print("Parsing Fasta File")
            GT = None
            if self.args['GT_file']:
                df = pd.read_csv(self.args['GT_file'], sep='\t')
                GT = "\r".join(str(df['cluster_id'].value_counts()).split('\n')[:-1])

            stats = {"n_seq": len(self.model.lengths),
                     "min_len": np.min(self.model.lengths),
                     "max_len": np.max(self.model.lengths),
                     "avg_len": np.mean(self.model.lengths),
                     "gt_summary": GT
                     }

            self.update_loading_progress.emit(stats)
        except Exception as e:
            self.parsing_error.emit(str(e))



class WorkerThread(QThread):
    def __init__(self, model, args):
        super().__init__()
        self.model = model
        self.args = args  

    update_progress = pyqtSignal(dict)
    update_coordinates = pyqtSignal(dict)

    def run(self):
        self.model.build_dataloaders()
        self.model.predictions = []

        for voter in range(self.args['n_voters']):
            self.model.net.apply(models.weights_init)
            self.model.epoch = 0

            for i in range(self.args['n_epochs']):
                if (i % 1)==0:
                    probabilities = self.model.calculate_probs()
                    self.update_coordinates.emit({"epoch":self.model.epoch, "probs":probabilities})

                loss = self.model.unsupervised_training_epoch()
                self.update_progress.emit({"epoch":self.model.epoch, "loss":loss, "n_voters": voter})

                if self.isInterruptionRequested():
                    return

                if self.args['noise'] != 0 and i != 0 and i % self.args['noise'] == 0:
                    with torch.no_grad():
                        for param in self.model.net.parameters():
                            param.add_(torch.randn(param.size()) * 0.09)  ## This may casue some troubles in CUDA

            y_pred, probabilities, latent = self.model.predict()
            self.model.predictions.append(y_pred)

class ResultsThread(QThread):

    def __init__(self, model, n_voters):
        super().__init__()
        self.model = model
        self.n_voters = n_voters
    
    completed = pyqtSignal(dict)

    def run(self):
        #y_pred, probabilities, latent = self.model.predict()

        if len(self.model.predictions) <= 1:
            y_pred, probabilities, latent = self.model.predict()
        else: # There is more than one assignment saved

            #We find a uniform assignment to all predictions using hungarian
            predictions = np.array(self.model.predictions)
            print(predictions.shape)
            for k in range(1, predictions.shape[0]):
                print(predictions.shape)
                ind, _ = cluster_acc(predictions[0][:], predictions[k][:])
                d = {}
                for i, j in ind:
                    d[i] = j

                for i in range(predictions.shape[1]):
                    predictions[k][i] = d[predictions[k][i]]

            # Take the majority voting of the predictions.
            mode, counts = stats.mode(predictions, axis=0)

            y_pred, probabilities = mode[0][:], (counts/ self.n_voters)[0][:]

        self.completed.emit({"assignments":y_pred, "probabilities":probabilities})


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1920, 1080)
        palette = QtGui.QPalette()
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(238, 238, 236))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Light, brush)
        brush = QtGui.QBrush(QtGui.QColor(246, 246, 245))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Midlight, brush)
        brush = QtGui.QBrush(QtGui.QColor(119, 119, 118))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Dark, brush)
        brush = QtGui.QBrush(QtGui.QColor(159, 159, 157))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Mid, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Text, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.BrightText, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.ButtonText, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(238, 238, 236))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Shadow, brush)
        brush = QtGui.QBrush(QtGui.QColor(246, 246, 245))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.AlternateBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 220))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.ToolTipBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.ToolTipText, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(238, 238, 236))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Light, brush)
        brush = QtGui.QBrush(QtGui.QColor(246, 246, 245))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Midlight, brush)
        brush = QtGui.QBrush(QtGui.QColor(119, 119, 118))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Dark, brush)
        brush = QtGui.QBrush(QtGui.QColor(159, 159, 157))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Mid, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Text, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.BrightText, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.ButtonText, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(238, 238, 236))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Shadow, brush)
        brush = QtGui.QBrush(QtGui.QColor(246, 246, 245))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.AlternateBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 220))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.ToolTipBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.ToolTipText, brush)
        brush = QtGui.QBrush(QtGui.QColor(119, 119, 118))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(238, 238, 236))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Light, brush)
        brush = QtGui.QBrush(QtGui.QColor(246, 246, 245))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Midlight, brush)
        brush = QtGui.QBrush(QtGui.QColor(119, 119, 118))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Dark, brush)
        brush = QtGui.QBrush(QtGui.QColor(159, 159, 157))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Mid, brush)
        brush = QtGui.QBrush(QtGui.QColor(119, 119, 118))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Text, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.BrightText, brush)
        brush = QtGui.QBrush(QtGui.QColor(119, 119, 118))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.ButtonText, brush)
        brush = QtGui.QBrush(QtGui.QColor(238, 238, 236))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(238, 238, 236))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Shadow, brush)
        brush = QtGui.QBrush(QtGui.QColor(238, 238, 236))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.AlternateBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 220))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.ToolTipBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.ToolTipText, brush)
        MainWindow.setPalette(palette)
        MainWindow.setLayoutDirection(QtCore.Qt.LeftToRight)
        MainWindow.setTabShape(QtWidgets.QTabWidget.Rounded)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.tabWidget = QtWidgets.QTabWidget(self.centralwidget)
        self.tabWidget.setGeometry(QtCore.QRect(60, 50, 1820, 980))
        


        self.LOGO = QtWidgets.QLabel(MainWindow)
        pixmap = QPixmap('logo.png')
        self.LOGO.setPixmap(pixmap)
        self.LOGO.setGeometry(QtCore.QRect(1575, 25, 300, 70))
        self.LOGO.setScaledContents(True)

        palette = QtGui.QPalette()
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Window, brush)
        self.tabWidget.setPalette(palette)
        self.tabWidget.setObjectName("tabWidget")
        self.Settings_tab = QtWidgets.QWidget()
        self.Settings_tab.setObjectName("Settings_tab")
        
        self.Reset_Button = QtWidgets.QPushButton(self.Settings_tab)
        self.Reset_Button.setGeometry(QtCore.QRect(790, 760, 300, 40))
        self.Reset_Button.setObjectName("Reset_Button")
        
        self.Submit_Button = QtWidgets.QPushButton(self.Settings_tab)
        self.Submit_Button.setGeometry(QtCore.QRect(830, 830, 220, 70))
        self.Submit_Button.setObjectName("Submit_Button")
        
        
        
        self.Settings_toolBox = QtWidgets.QToolBox(self.Settings_tab)
        self.Settings_toolBox.setGeometry(QtCore.QRect(360, 100, 1040, 530))
        palette = QtGui.QPalette()
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(238, 238, 236))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Light, brush)
        brush = QtGui.QBrush(QtGui.QColor(246, 246, 245))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Midlight, brush)
        brush = QtGui.QBrush(QtGui.QColor(119, 119, 118))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Dark, brush)
        brush = QtGui.QBrush(QtGui.QColor(159, 159, 157))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Mid, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Text, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.BrightText, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.ButtonText, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(238, 238, 236))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Shadow, brush)
        brush = QtGui.QBrush(QtGui.QColor(246, 246, 245))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.AlternateBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 220))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.ToolTipBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.ToolTipText, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(238, 238, 236))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Light, brush)
        brush = QtGui.QBrush(QtGui.QColor(246, 246, 245))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Midlight, brush)
        brush = QtGui.QBrush(QtGui.QColor(119, 119, 118))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Dark, brush)
        brush = QtGui.QBrush(QtGui.QColor(159, 159, 157))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Mid, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Text, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.BrightText, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.ButtonText, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(238, 238, 236))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Shadow, brush)
        brush = QtGui.QBrush(QtGui.QColor(246, 246, 245))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.AlternateBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 220))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.ToolTipBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.ToolTipText, brush)
        brush = QtGui.QBrush(QtGui.QColor(119, 119, 118))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(238, 238, 236))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Light, brush)
        brush = QtGui.QBrush(QtGui.QColor(246, 246, 245))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Midlight, brush)
        brush = QtGui.QBrush(QtGui.QColor(119, 119, 118))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Dark, brush)
        brush = QtGui.QBrush(QtGui.QColor(159, 159, 157))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Mid, brush)
        brush = QtGui.QBrush(QtGui.QColor(119, 119, 118))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Text, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.BrightText, brush)
        brush = QtGui.QBrush(QtGui.QColor(119, 119, 118))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.ButtonText, brush)
        brush = QtGui.QBrush(QtGui.QColor(238, 238, 236))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(238, 238, 236))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Shadow, brush)
        brush = QtGui.QBrush(QtGui.QColor(238, 238, 236))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.AlternateBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 220))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.ToolTipBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.ToolTipText, brush)
        

        #self.LOGO.resize(pixmap.width(), pixmap.height())

        
        self.Settings_toolBox.setPalette(palette)
        self.Settings_toolBox.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.Settings_toolBox.setAutoFillBackground(False)
        self.Settings_toolBox.setFrameShape(QtWidgets.QFrame.NoFrame)
        self.Settings_toolBox.setObjectName("Settings_toolBox")
        self.basic_page = QtWidgets.QWidget()
        self.basic_page.setGeometry(QtCore.QRect(0, 0, 921, 423))
        self.basic_page.setObjectName("basic_page")
        self.label = QtWidgets.QLabel(self.basic_page)
        self.label.setGeometry(QtCore.QRect(50, 25, 311, 31))
        self.label.setObjectName("label")
        self.label_2 = QtWidgets.QLabel(self.basic_page)
        self.label_2.setGeometry(QtCore.QRect(50, 75, 411, 41))
        self.label_2.setObjectName("label_2")
        self.label_5 = QtWidgets.QLabel(self.basic_page)
        self.label_5.setGeometry(QtCore.QRect(50, 230, 411, 41))
        self.label_5.setObjectName("label_5")
        self.label_3 = QtWidgets.QLabel(self.basic_page)
        self.label_3.setGeometry(QtCore.QRect(50, 130, 411, 41))
        self.label_3.setObjectName("label_3")
        self.label_4 = QtWidgets.QLabel(self.basic_page)
        self.label_4.setGeometry(QtCore.QRect(50, 180, 411, 41))
        self.label_4.setObjectName("label_4")

        self.label_k = QtWidgets.QLabel(self.basic_page)
        self.label_k.setGeometry(QtCore.QRect(52, 280, 411, 41))
        self.label_k.setObjectName("label_k")


        self.input_n_epochs = QtWidgets.QSpinBox(self.basic_page)
        self.input_n_epochs.setGeometry(QtCore.QRect(850, 230, 121, 41))
        self.input_n_epochs.setAlignment(QtCore.Qt.AlignRight|QtCore.Qt.AlignTrailing|QtCore.Qt.AlignVCenter)
        self.input_n_epochs.setMinimum(1)
        self.input_n_epochs.setMaximum(300)
        self.input_n_epochs.setProperty("value", 50)
        self.input_n_epochs.setObjectName("input_n_epochs")
        self.input_n_mimics = QtWidgets.QSpinBox(self.basic_page)
        self.input_n_mimics.setGeometry(QtCore.QRect(850, 180, 121, 41))
        self.input_n_mimics.setAlignment(QtCore.Qt.AlignRight|QtCore.Qt.AlignTrailing|QtCore.Qt.AlignVCenter)
        self.input_n_mimics.setMinimum(2)
        self.input_n_mimics.setMaximum(10)
        self.input_n_mimics.setProperty("value", 3)
        self.input_n_mimics.setObjectName("input_n_mimics")

        self.input_n_clusters = QtWidgets.QSpinBox(self.basic_page)
        self.input_n_clusters.setGeometry(QtCore.QRect(850, 130, 121, 41))
        self.input_n_clusters.setAlignment(QtCore.Qt.AlignRight|QtCore.Qt.AlignTrailing|QtCore.Qt.AlignVCenter)
        self.input_n_clusters.setMinimum(1)
        self.input_n_clusters.setMaximum(50)
        self.input_n_clusters.setValue(5)
        self.input_n_clusters.setObjectName("input_n_clusters")

        self.input_k = QtWidgets.QSpinBox(self.basic_page)
        self.input_k.setGeometry(QtCore.QRect(850, 280, 121, 41))
        self.input_k.setAlignment(QtCore.Qt.AlignRight|QtCore.Qt.AlignTrailing|QtCore.Qt.AlignVCenter)
        self.input_k.setMinimum(1)
        self.input_k.setMaximum(10)
        self.input_k.setValue(6)
        self.input_k.setObjectName("input_k")
        
        
        self.ChooseSeq_Button = QtWidgets.QPushButton(self.basic_page)
        self.ChooseSeq_Button.setGeometry(QtCore.QRect(800, 10, 191, 31))
        self.ChooseSeq_Button.setCheckable(False)
        self.ChooseSeq_Button.setFlat(True)
        self.ChooseSeq_Button.setObjectName("ChooseSeq_Button")
        self.ChooseGT_Button = QtWidgets.QPushButton(self.basic_page)
        self.ChooseGT_Button.setGeometry(QtCore.QRect(800, 70, 191, 31))
        self.ChooseGT_Button.setCheckable(False)
        self.ChooseGT_Button.setFlat(True)
        self.ChooseGT_Button.setObjectName("ChooseGT_Button")
        self.Settings_toolBox.addItem(self.basic_page, "")
        self.advanced_page = QtWidgets.QWidget()
        self.advanced_page.setGeometry(QtCore.QRect(0, 0, 921, 423))
        self.advanced_page.setObjectName("advanced_page")



        self.label_6 = QtWidgets.QLabel(self.advanced_page)
        self.label_6.setGeometry(QtCore.QRect(50, 10, 311, 31))
        self.label_6.setObjectName("label_6")
        self.label_7 = QtWidgets.QLabel(self.advanced_page)
        self.label_7.setGeometry(QtCore.QRect(50, 65, 371, 31))
        self.label_7.setObjectName("label_7")
        self.label_8 = QtWidgets.QLabel(self.advanced_page)
        self.label_8.setGeometry(QtCore.QRect(50, 175, 371, 31))
        self.label_8.setObjectName("label_8")
        self.label_17 = QtWidgets.QLabel(self.advanced_page)
        self.label_17.setGeometry(QtCore.QRect(50, 225, 311, 31))
        self.label_17.setObjectName("label_17")
        self.input_optimizer = QtWidgets.QComboBox(self.advanced_page)
        self.input_optimizer.setGeometry(QtCore.QRect(850, 10, 145, 41))
        self.input_optimizer.setObjectName("input_optimizer")
        self.input_optimizer.addItem("")
        self.input_optimizer.addItem("")
        self.input_optimizer.addItem("")
        self.input_optimizer.addItem("")
        self.label_9 = QtWidgets.QLabel(self.advanced_page)
        self.label_9.setGeometry(QtCore.QRect(50, 120, 311, 31))
        self.label_9.setObjectName("label_9")
        self.input_batch_sz = QtWidgets.QSpinBox(self.advanced_page)
        self.input_batch_sz.setGeometry(QtCore.QRect(850, 125, 141, 41))
        self.input_batch_sz.setMaximum(600)
        self.input_batch_sz.setObjectName("input_batch_sz")
        self.input_batch_sz.setProperty("value", 252)
        self.input_lambda = QtWidgets.QLineEdit(self.advanced_page)
        self.input_lambda.setGeometry(QtCore.QRect(850, 65, 141, 41))
        self.input_lambda.setObjectName("input_lambda")
        self.input_lambda.insert("2.5")

        self.input_n_voters = QtWidgets.QSpinBox(self.advanced_page)
        self.input_n_voters.setGeometry(QtCore.QRect(850, 225, 141, 41))
        self.input_n_voters.setObjectName("input_n_voters")
        self.input_n_voters.setMaximum(600)
        self.input_n_voters.setProperty("value", 1)
        
        self.input_noise = QtWidgets.QSpinBox(self.advanced_page)
        self.input_noise.setGeometry(QtCore.QRect(850, 175, 141, 41))
        self.input_noise.setObjectName("input_noise")
        self.input_noise.setMaximum(50)
        self.input_noise.setMinimum(0)
        self.input_noise.setProperty("value", 0)

        self.Settings_toolBox.addItem(self.advanced_page, "")
        self.tabWidget.addTab(self.Settings_tab, "")
        self.GT_fname = None

        ## Definition of the Running Tab

        self.Running_tab = QtWidgets.QWidget()
        self.Running_tab.setObjectName("Running_tab")
        self.progressBar = QtWidgets.QProgressBar(self.Running_tab)
        self.progressBar.setGeometry(QtCore.QRect(550, 650, 1200, 41))
        self.progressBar.setProperty("value", 0)
        self.progressBar.setObjectName("progressBar")

        self.Summary = QtWidgets.QLabel(self.Running_tab)
        self.Summary.setGeometry(QtCore.QRect(70, 80, 261, 51))
        self.Summary.setObjectName("Summary")
        self.summary_n_seq = QtWidgets.QLabel(self.Running_tab)
        self.summary_n_seq.setGeometry(QtCore.QRect(70, 140, 350, 31))
        self.summary_n_seq.setObjectName("summary_n_seq")
        self.summary_min_len = QtWidgets.QLabel(self.Running_tab)
        self.summary_min_len.setGeometry(QtCore.QRect(70, 190, 350, 31))
        self.summary_min_len.setObjectName("summary_min_len")
        self.summary_max_len = QtWidgets.QLabel(self.Running_tab)
        self.summary_max_len.setGeometry(QtCore.QRect(70, 240, 350, 31))
        self.summary_max_len.setObjectName("summary_max_len")
        
        self.summary_avg_len = QtWidgets.QLabel(self.Running_tab)
        self.summary_avg_len.setGeometry(QtCore.QRect(70, 290, 350, 31))
        self.summary_avg_len.setObjectName("summary_avg_len")

        self.summary_GT = QtWidgets.QLabel(self.Running_tab)
        self.summary_GT.setGeometry(QtCore.QRect(70, 330, 350, 350))
        self.summary_avg_len.setObjectName("summary_GT")
        
        
        
        self.progress_info = QtWidgets.QLabel(self.Running_tab)
        self.progress_info.setGeometry(QtCore.QRect(550, 600, 271, 41))
        font = QtGui.QFont()
        font.setPointSize(9)
        self.progress_info.setFont(font)
        self.progress_info.setObjectName("progress_info")
        self.Training_Button = QtWidgets.QPushButton(self.Running_tab)
        self.Training_Button.setGeometry(QtCore.QRect(830, 800, 221, 71))
        self.Training_Button.setObjectName("Training_Button")
        self.Stop_Training_Button = QtWidgets.QPushButton(self.Running_tab)
        self.Stop_Training_Button.setGeometry(QtCore.QRect(1330, 800, 221, 71))
        self.Stop_Training_Button.setObjectName("Stop_Training_Button")
        self.tabWidget.addTab(self.Running_tab, "")
        self.tabWidget.setTabEnabled(1,False)
        
        ## Define Results Tab
        self.Results_tab = QtWidgets.QWidget()
        self.Results_tab.setObjectName("Results_tab")
        self.Matrix_Button = QtWidgets.QRadioButton(self.Results_tab)
        self.Matrix_Button.setGeometry(QtCore.QRect(620, 550, 212, 81))
        self.Matrix_Button.setChecked(True)
        self.Matrix_Button.setObjectName("Matrix_Button")
        self.tSNE_Button = QtWidgets.QRadioButton(self.Results_tab)
        self.tSNE_Button.setGeometry(QtCore.QRect(860, 570, 212, 40))
        self.tSNE_Button.setObjectName("tSNE_Button")

        self.save_results = QtWidgets.QPushButton(self.Results_tab)
        self.save_results.setGeometry(QtCore.QRect(450, 850, 185, 48))
        self.save_results.setObjectName("save_results")
        self.save_model = QtWidgets.QPushButton(self.Results_tab)
        self.save_model.setGeometry(QtCore.QRect(730, 640, 185, 48))
        self.save_model.setObjectName("save_model")
        self.tabWidget.addTab(self.Results_tab, "")
        self.tabWidget.setTabEnabled(2, False)
        
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1301, 39))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        

        self.Submit_Button.clicked.connect(self.parse)
        self.Reset_Button.clicked.connect(self.reset_to_default)
        self.Training_Button.clicked.connect(self.train)
        self.ChooseSeq_Button.clicked.connect(self.get_FASTA_file)
        self.ChooseGT_Button.clicked.connect(self.get_GT_file)
        self.Stop_Training_Button.clicked.connect(self.stop_training)
        self.save_results.clicked.connect(self.save_results_file)
        self.args = {}

        self.retranslateUi(MainWindow)
        self.tabWidget.setCurrentIndex(0)
        self.Settings_toolBox.setCurrentIndex(0)
        self.progressBar.setValue(0)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

        define_ToolTips(self)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.Submit_Button.setText(_translate("MainWindow", "Submit"))
        self.Reset_Button.setText(_translate("MainWindow", "Reset Parameters"))

        self.label.setText(_translate("MainWindow", "Sequence File:"))
        self.label_2.setText(_translate("MainWindow", "Ground Truth File (Optional):"))
        self.label_5.setText(_translate("MainWindow", "Training Epochs:"))
        self.label_k.setText(_translate("MainWindow","k-mer length:"))
        self.label_3.setText(_translate("MainWindow", "Number of Clusters:"))
        self.label_4.setText(_translate("MainWindow", "Number of mimics:"))
        self.ChooseSeq_Button.setText(_translate("MainWindow", "Choose File"))
        self.ChooseGT_Button.setText(_translate("MainWindow", "Choose File "))
        self.Settings_toolBox.setItemText(self.Settings_toolBox.indexOf(self.basic_page), _translate("MainWindow", "Basic"))

        self.label_6.setText(_translate("MainWindow", "Model Optimizer:"))
        self.label_7.setText(_translate("MainWindow", "Balance Hyperparameter:"))
        self.label_8.setText(_translate("MainWindow", "Add Training Noise:"))
        self.input_optimizer.setItemText(0, _translate("MainWindow", "Adam"))
        self.input_optimizer.setItemText(1, _translate("MainWindow", "SGD"))
        self.input_optimizer.setItemText(2, _translate("MainWindow", "RMSProp"))
        self.input_optimizer.setItemText(3, _translate("MainWindow", "Adadelta"))
        self.label_9.setText(_translate("MainWindow", "Batch Size:"))
        self.label_17.setText(_translate("MainWindow", "Number of Voters"))
        self.Settings_toolBox.setItemText(self.Settings_toolBox.indexOf(self.advanced_page), _translate("MainWindow", "Advanced Settings"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.Settings_tab), _translate("MainWindow", "Settings"))
        self.Summary.setText(_translate("MainWindow", "Dataset Summary"))
        self.summary_n_seq.setText(_translate("MainWindow", "N. Sequences:"))
        self.summary_min_len.setText(_translate("MainWindow", "Min. Length:"))
        self.summary_max_len.setText(_translate("MainWindow", "Max. Length:"))
        self.summary_avg_len.setText(_translate("MainWindow", "Avg. Length:"))
        self.progress_info.setText(_translate("MainWindow", "Training Progress"))
        self.Training_Button.setText(_translate("MainWindow", "Start"))
        self.Stop_Training_Button.setText(_translate("MainWindow", "Stop"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.Running_tab), _translate("MainWindow", "Training"))
        self.Matrix_Button.setText(_translate("MainWindow", "Conf&usion \n Matrix"))
        self.tSNE_Button.setText(_translate("MainWindow", "tSNE"))
        
        self.save_results.setText(_translate("MainWindow", "Save Results"))
        self.save_model.setText(_translate("MainWindow", "Save Model"))

        self.tabWidget.setTabText(self.tabWidget.indexOf(self.Results_tab), _translate("MainWindow", "Results"))
        
        self.Training_Button.setVisible(False)
        self.Stop_Training_Button.setVisible(False)

    def parse(self):

        #### Check Validity of all arguments and show an Error Message !!!!!!!!!!

        self.args['sequence_file'] = self.FASTA_fname[0]
        self.args['n_clusters'] = int(self.input_n_clusters.text())

        self.args['n_epochs'] = int(self.input_n_epochs.text())
        self.args['n_mimics'] = int(self.input_n_mimics.text())
        self.args['batch_sz'] = int(self.input_batch_sz.text())

        self.args['GT_file'] = self.GT_fname
        self.args['k'] = int(self.input_k.text())

        self.args['optimizer'] = self.input_optimizer.currentData()
        self.args['batch_sz'] = int(self.input_batch_sz.text())
        self.args['lambda'] = float(self.input_lambda.text())
        self.args['noise'] =  int(self.input_noise.text())
        self.args['n_voters'] = int(self.input_n_voters.text())

        if self.args['sequence_file'] == "":
            QMessageBox.critical(self.centralwidget, "Error!", "Wowza! \n Please Select a Fasta File")

        elif self.args['batch_sz'] % self.args['n_mimics']  !=  0:
            QMessageBox.critical(self.centralwidget, "Error!", "Batch Size Must be a Multiple of N_mimics")

        else: 

            self.training_loss = []
            self.model = models.IID_model(self.args)
            self.worker = ParserThread(self.model, self.args)
            self.worker.start()
            self.worker.parsing_error.connect(self.evt_display_parsing_error)
            self.worker.update_loading_progress.connect(self.evt_update_loading_progress)

            self.tabWidget.setTabEnabled(1,True)

            self.progress_info.setText("Parsing Fasta File ....")
            self.Training_Button.setEnabled(True)

            self.display_polygon = MplCanvas(self.Running_tab, width=5, height=4, dpi=100)
            self.display_polygon.axes.axis('off')
            self.display_polygon.axes.set_title('Training Progress (Epoch 0)')
            self.display_polygon.setGeometry(QtCore.QRect(540, 30, 551, 420))
            self.display_polygon.setObjectName("display_polygon")
            

            self.display_training = MplCanvas(self.Running_tab, width=5, height=4, dpi=100)
            self.display_training.setGeometry(QtCore.QRect(1100, 30, 660, 420))
            self.display_training.axes.set_xlim(0,self.args['n_epochs'])
            self.display_training.axes.grid(True)
            self.display_training.axes.set_title("Learning Curve")
            self.display_training.axes.set_xlabel("Epoch")
            self.display_training.axes.set_ylabel("Training Loss")
            toolbar = NavigationToolbar(self.display_training, self.Running_tab)
            toolbar.setMaximumWidth(600)
            toolbar.setMaximumHeight(60)
            toolbar.setStyleSheet("QToolBar { border: none }")


            layout = QtWidgets.QVBoxLayout()
            layout.addWidget(toolbar)
            layout.setContentsMargins(0,0,0,0)
            layout.setSpacing(0)

            #Create a placeholder widget to hold our toolbar and canvas.
            #Graphic Container
            self.widget_display_training = QtWidgets.QWidget(self.Running_tab)
            self.widget_display_training.setGeometry(QtCore.QRect(1200, 450, 600, 60))
            self.widget_display_training.setObjectName("display_training")
            self.widget_display_training.setLayout(layout)

            self.tabWidget.setCurrentIndex(1)
        
        
        
    def train(self):
        self.training_plot = [None] * self.args["n_voters"]
        self.worker = WorkerThread(self.model, self.args)
        self.worker.start()
        self.progress_info.setText("Training in Progres ...")
        self.progressBar.setValue(5)
        self.worker.finished.connect(self.evt_training_finished)
        self.worker.update_progress.connect(self.evt_update_progress)
        self.worker.update_coordinates.connect(self.evt_plot_progress)

        self.Training_Button.setEnabled(False)


    def stop_training(self):
        self.worker.requestInterruption()
        self.worker.wait(1)


    def evt_show_results(self, info):
  
        self.progress_info.setText("Preparing results ...")
        length = len(self.model.names)

        self.Results_Table = QtWidgets.QTableWidget(self.Results_tab)
        self.Results_Table.setGeometry(QtCore.QRect(30, 50, 1000, 750))
        font = QtGui.QFont()
        font.setPointSize(8)
        self.Results_Table.setFont(font)
        self.Results_Table.setObjectName("Results_Table")
        self.Results_Table.setColumnCount(3)
        self.Results_Table.setRowCount(length)

        item = QtWidgets.QTableWidgetItem()
        self.Results_Table.setVerticalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.Results_Table.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.Results_Table.setHorizontalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        self.Results_Table.setHorizontalHeaderItem(2, item)
        item = QtWidgets.QTableWidgetItem()
        self.Results_Table.setItem(0, 0, item)
        item = QtWidgets.QTableWidgetItem()
        self.Results_Table.setItem(0, 1, item)
        item = QtWidgets.QTableWidgetItem()
        self.Results_Table.setItem(0, 2, item)
        self.Results_Table.horizontalHeader().setDefaultSectionSize(250)

        item = self.Results_Table.verticalHeaderItem(0)
        item.setText("1")
        item = self.Results_Table.horizontalHeaderItem(0)
        item.setText("Seq. ID")
        item = self.Results_Table.horizontalHeaderItem(1)
        item.setText("Assignment")
        item = self.Results_Table.horizontalHeaderItem(2)
        item.setText("Confidence \n Score")
        __sortingEnabled = self.Results_Table.isSortingEnabled()
        self.Results_Table.setSortingEnabled(False)
        self.Results_Table.setSortingEnabled(__sortingEnabled)

        for i in range(length):
            #print(self.model.dataset_info['names'][i], info['assignments'][i], info['probabilities'][i])
            
            item = QtWidgets.QTableWidgetItem()
            self.Results_Table.setItem(i, 0, item)
            item = QtWidgets.QTableWidgetItem()
            self.Results_Table.setItem(i, 1, item)
            item = QtWidgets.QTableWidgetItem()
            self.Results_Table.setItem(i, 2, item)

            item = self.Results_Table.item(i, 0)
            item.setText(self.model.names[i])
            item = self.Results_Table.item(i, 1)
            item.setText(str(info['assignments'][i]))
            item = self.Results_Table.item(i, 2)
            item.setText(str(100*info['probabilities'][i])[:5])

        if self.GT_fname:
            self.display_results = MplCanvas(self.Results_tab, width=5, height=4, dpi=100)
            self.display_results.setGeometry(QtCore.QRect(1040, 50, 600, 500))

            df = pd.read_csv(self.GT_fname, sep='\t')
            print("Cluster Distribution")
            print(df['cluster_id'].value_counts())
            y_true = df['cluster_id'].to_numpy()
            unique_labels = list(np.unique(y_true))
            numClasses = len(unique_labels)
            y = np.array(list(map(lambda x: unique_labels.index(x), y_true)))
            y_pred = info['assignments'].astype(np.int32)

            # HUNGARIAN
            ind, acc = cluster_acc(y, y_pred)
            print(acc)
            d = {}
            for i, j in ind:
                d[i] = j
            w = np.zeros((numClasses, self.args["n_clusters"]), dtype=np.int64)
            for i in range(length):
                #print(y[i], d[y_pred[i]])
                w[y[i], d[y_pred[i]]] += 1

            plot_confusion_matrix(w, unique_labels, ax=self.display_results.axes, normalize=False)

        self.progress_info.setText("Results are ready")
        self.tabWidget.setTabEnabled(2, True)

    def evt_update_loading_progress(self, stats):
        self.summary_n_seq.setText( "N. Sequences: \t {}".format(stats["n_seq"]))
        self.summary_min_len.setText("Min. Length: \t {}".format(stats["min_len"]))
        self.summary_max_len.setText("Max. Length: \t {}".format(stats["max_len"]))
        self.summary_avg_len.setText("Avg. Length: \t {}".format(stats["avg_len"]))
        self.summary_avg_len.setObjectName("summary_avg_len")
        #if stats['gt_summary']:
        #    self.summary_GT.setText("Dataset Label Summary: \n{}".format(stats['gt_summary']))

        self.progress_info.setText("Ready to train!")
        self.Training_Button.setVisible(True)
        self.Stop_Training_Button.setVisible(True)


    def evt_training_finished(self):
        self.progress_info.setText("Training Complete")
        QMessageBox.information(self.centralwidget, "Done!", "Training Finished!")

        self.results_worker = ResultsThread(self.model, self.args['n_voters'])
        self.results_worker.start()
        self.results_worker.completed.connect(self.evt_show_results)

    def evt_display_parsing_error(self, msg):
        self.tabWidget.setTabEnabled(1, False)
        self.tabWidget.setCurrentIndex(0)
        QMessageBox.critical(self.centralwidget, "Check your Files", "Wowza! \n" + msg)


    def evt_update_progress(self, info):


        if self.training_plot[info["n_voters"]] is None:
            #self.display_training.axes.set_ylim(-(2*self.args['lambda']-1)*np.log(self.args['n_clusters']) + 3, info["loss"])
            self.training_loss=[info["loss"]]
            self.display_training.axes.set_ylim(self.training_loss[0]-2.2, self.training_loss[0])
            self.training_plot[info["n_voters"]], = self.display_training.axes.plot(range(1, info["epoch"] + 1), self.training_loss)
            self.training_plot[info["n_voters"]].set_label(f'Model {info["n_voters"] + 1} ')
            self.display_training.axes.legend()

        else:
            self.training_loss.append(info["loss"])
            self.training_plot[info["n_voters"]].set_ydata(self.training_loss)
            self.training_plot[info["n_voters"]].set_xdata(range(info["epoch"]))
        
        self.display_training.draw()
        self.progressBar.setValue(10 + int(90 * info['epoch'] /self.args['n_epochs']))

    def evt_plot_progress(self, info):
        self.display_polygon.axes.clear()
        PlotPolygon(info['probs'], self.args['n_clusters'], 
                    self.display_polygon.axes, 
                    "Epoch {}".format(info['epoch']))
        self.display_polygon.draw()
              
    def get_FASTA_file(self):
        # Check that is not empty and that is a FASTA file !!!!!!!!!!!!!
        self.FASTA_fname = QtWidgets.QFileDialog.getOpenFileName()
        short_name = self.FASTA_fname[0].split('/')[-1]
        self.ChooseSeq_Button.setText(short_name)

    def get_GT_file(self):
        # Check that is not empty and that has the appropriate format   !!!!!!!!!!!!!
        self.GT_fname = QtWidgets.QFileDialog.getOpenFileName()[0]
        short_name = self.GT_fname.split('/')[-1]
        self.ChooseGT_Button.setText(short_name)

    def reset_to_default(self):
        self.input_n_epochs.setValue(35)
        self.input_n_mimics.setValue(3) 
        self.input_n_clusters.setValue(5)
        self.input_k.setValue(6)
        #self.input_optimizer.setValue("Adam")
        self.input_batch_sz.setValue(252)
        self.input_lambda.setText("2.8")
        self.input_noise.setValue(0)
    
    def save_results_file(self):
        filename = QtWidgets.QFileDialog.getSaveFileName(self.Results_tab, 'Save File', '', 'CSV(*.tsv)')[0]
        if filename:
            with open(filename, 'w') as handle:
                writer = csv.writer(handle, delimiter='\t')
                for row in range(self.Results_Table.rowCount()):
                    rowdata = []
                    for column in range(self.Results_Table.columnCount()):
                        item = self.Results_Table.item(row, column)
                        if item is not None:
                            rowdata.append(item.text())
                        else:
                            rowdata.append('')
                    writer.writerow(rowdata)
        
    #def save_model():
    

if __name__ == "__main__":
    import sys
    import breeze_resources
    app = QtWidgets.QApplication(sys.argv)

    # set stylesheet
    file = QFile("dist/light/stylesheet.qss")
    file.open(QFile.ReadOnly | QFile.Text)
    stream = QTextStream(file)
    app.setStyleSheet(stream.readAll())

    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
